<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Be a Cool hacker]]></title>
  <link href="http://flowkater.github.io/atom.xml" rel="self"/>
  <link href="http://flowkater.github.io/"/>
  <updated>2013-08-09T07:36:55+09:00</updated>
  <id>http://flowkater.github.io/</id>
  <author>
    <name><![CDATA[flowkater a.k.a Fl0wk27er]]></name>
    <email><![CDATA[chjw102@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 와 Rails 배우고 싶을때]]></title>
    <link href="http://flowkater.github.io/blog/2013/08/07/ruby-and-rails-learning-resource/"/>
    <updated>2013-08-07T17:33:00+09:00</updated>
    <id>http://flowkater.github.io/blog/2013/08/07/ruby-and-rails-learning-resource</id>
    <content type="html"><![CDATA[<p>자칭, 타칭 만년 루비 꼴찌이지만 루비를 사랑하는 사람으로써 좀 더 많은 분들이 루비라는 언어를 쉽게 배우고 사용해보고 즐겼으면 좋겠다는 생각으로 제가 처음에 루비와 루비온레일스 웹 프레임워크를 공부하면서 봤던 자료들을 공유하고자 합니다. <!-- more --> <br/>
그냥 개인적인 취향 문제이니 여기 자료들이 어떤 분들에게는 &lsquo;좋은&rsquo; 자료들이 아닐 수 있다는 것을 명심하시고 특히 어떤 책을 봐서 어떻게 공부했다는 그냥 지표로 삼으시고 자신만의 방법으로 익히고 배워나가시면 됩니다. 프로그래밍 배우기 제일 좋은 방법은 만들어보는 것이니깐요. <br/>
아 또 여기에 제가 적어놨다고 해서 제가 그 책을 다 읽어봤다고 착각하시면 안됩니다. 프로그래밍 책을 &lsquo;완독&#8217;하는 건 그렇게 효율적인 방법이 아니라는 개인적인 생각에..(사실 게을러서)</p>

<h2>Ruby</h2>

<h3><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7054149">루비 프로그래밍 언어(아마추어에서 프로까지)</a></h3>

<p><img src="http://imageshack.us/a/img407/1197/3jsq.png" alt="루비 프로그래밍 언어(아마추어에서 프로까지)" /><br/>
루비 2.0 이 나왔지만 언어의 기본 문법이나 패러다임은 레일스의 그것과는 달리 대동소이해서 버전에 상관없이 학습을 해도 괜찮습니다.<br/>
하지만 <a href="http://www.ruby-lang.org/en/news/2013/06/30/we-retire-1-8-7/">1.8.7 버전에 대한 지원을 공식적으로 종료</a>하였기 때문에 현재 제일 널리 쓰이는 Rails 3.2.x 버전과 맞는 1.9.3 버전을 기준으로 학습을 하는 것을 추천합니다. 보통 루비 언어를 학습할때 추천하는 책은 <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=2625527">곡괭이 책</a>을 추천하는데 굉장히 좋은 책임은 분명하나 언어 습득의 지름길은 풍부한 예제와 토이 프로그램을 만드는 것이라고 생각하기 때문에 위 책을 추천해드립니다.<br/>
해당 책은 텍스트 분석기, 던전 텍스트 어드벤처 게임, 채팅 봇(일종의 심심이) 만들기 예제들이 있어서 루비 언어의 강력한 기능들과 우아한 문법들을 좀 더 와닿게 학습을 할 수 있습니다. 한가지 장담을 못드리는건 전 원서를 읽으면서 공부했었기 때문에 올해 번역이 되어 나온 이 책이 얼마나 번역이 잘되어있는지는.. 읽어보지 않아서 ㅎㅎ;<br/>
&nbsp;</p>

<h3><a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104">Eloquent Ruby</a></h3>

<p><img src="http://imageshack.us/a/img46/9320/rx48.png" alt="Eloquent Ruby" /><br/>
안타깝게도 우리나라에서 루비는 주류 언어가 아니기 때문에 사실 대부분의 자료들이나 책들이 영어로 되어있습니다.(또는 일본어) 해서 원서 자료를 참고해서 공부하는 건 불가피한 것 같습니다. <br/>
이 책은 한마디로 루비 언어의 idiom 에 포커스를 맞춘 책이라고 할 수 있습니다. 어떤 언어의 문법을 배운다고 해서 그 나라 원어민처럼 말할 수 없는데 그 이유는 우리는 그들의 문화와 idiom(관용어)를 이해하지 못하기 때문입니다. 즉, 루비를 좀 더 루비답게 쓰는 법에 대해서 설명하고 있는 책입니다. <br/>
그 장에서 말하려고 하는 주제와 활용, 그리고 실제 필드에서 사용되는 예제를 들어 쉽고 재밌게 쓰여져 있습니다.
&nbsp;</p>

<h3><a href="http://tryruby.org">Try Ruby</a></h3>

<p><img src="http://img38.imageshack.us/img38/9216/x81.png" alt="Try Ruby" /><br/>
루비나 파이썬 같은 인터프리터 언어의 장점 중 하나는 라인 바이 라인으로 코드를 쳐보고 바로 바로 피드백을 볼 수 있다는 장점이 있습니다. 때문에 웹페이지에서 코드를 직접 쳐보고 결과를 확인할 수 있는 웹 서비스들이 많은데 루비 입문자를 위한 대표적인 사이트 중 하나이다. 15분만 있으면 루비를 배운다는 건데 뭐 영어라는 점을 고려해도 얼추 30분안으로 해당 튜토리얼을 다 끝내볼 수 있다. 루비를 설치하지 않고도 빠르고 적은 시간으로 학습을 할 수 있으니 맛보기엔 제일.
&nbsp;</p>

<h3><a href="http://rubymonk.com/">Ruby Monk</a></h3>

<p><img src="http://imageshack.us/a/img19/6961/mscq.png" alt="Ruby Monk" /><br/>
Try Ruby 가 루비 언어를 소개하는 체험판 정도라면 Ruby Monk 는 Try Ruby 와 똑같은 방식으로 좀 더 루비를 제대로 배울 수 있는 온라인 학습 사이트입니다. 얼마전까지 유료 결제를 해야만 :Ascent 코스를 진행할 수 있었는데 지금은 아예 무료로 다 공개하고 있는 것 같네요. 언어 챕터 별 예제를 하나하나 실행해보고 결과를 확인해보면서 학습할 수 있고 챕터에 해당하는 간단한 프로그래밍 문제가 제공되어서 해당 문제를 풀다보면 어느새 루비 언어 활용에 익숙해지는 것을 느낄 수 있습니다. 특히 코드를 실행할 때 마다 Master says 해서 마스터 요다의 명대사나 쿵푸 팬더 시푸 사부의 명대사 등이 나오면서 깨알같은 재미(또는 영어공부)를 느낄 수 있습니다.<br/>
개인적으로 책을 읽을 시간이 없다면 이 사이트를 추천합니다.
&nbsp;</p>

<h3><a href="http://www.codeschool.com/courses/ruby-bits">Code School Ruby bits 1,2</a></h3>

<p><img src="http://imageshack.us/a/img23/7170/h5f2.png" alt="Code School Ruby bits 1,2" /><br/>
Code School 은 루비와 레일스뿐만 아니라 자바스크립트, HTML, CSS 심지어는 IOS 같이 웹에서 Learn by Doing 할 수 있는 서비스입니다. 몇몇개가 무료로 제공되고 있고 subscription 형태의 유료 서비스로서 한달 25$인데 충분히 그 값어치를 하는 것 같습니다. 하나의 파트에 5~8챕터가 구성되어있고 각 챕터만 최소 5분에서 최대 20분까지의 짧은 동영상 강의가 있습니다. 그리고 동영상 강의의 내용으로 웹에서 문제를 풀 수 있도록 시스템이 되어 있어서 설명만 듣고 잘 이해되지 않는 부분에 대해서도 충분히 피드백을 받으면서 학습할 수 있습니다. 영어라서 동영상 강의가 어렵지 않느냐하는 질문이 있을수 있는데 실제로 다른 언어권의 유저가 영어 캡션이라도 달아달라고 요청을 하니 Gregg Pollack 이 설사 영어를 못알아들어도 PPT 만 보더라도 충분히 이해할 수 있도록 디자인되어 있다고 답변을 하였습니다. 실제로 고퀄리티의 PPT 자료를 보면 그 말이 이해가 되실겁니다.
&nbsp;</p>

<h2>Ruby on Rails</h2>

<h3><a href="http://www.insightbook.co.kr/books/programming-insight/%EB%A0%88%EC%9D%BC%EC%8A%A4%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-%EC%95%A0%EC%9E%90%EC%9D%BC-%EC%9B%B9-%EA%B0%9C%EB%B0%9C">레일스와 함께하는 애자일 웹 개발</a></h3>

<p><img src="http://imageshack.us/a/img89/8642/em9f.png" alt="레일스와 함께하는 애자일 웹 개발" /><br/>
국내에서 3.2.x 버전에 맞춘 책은 이 책이 유일하고 아마 레일스를 학습하고자 하시는 분들은 대부분 이 책을 구입하셨을 겁니다. 인사이트 출판사에서 이번에 개정판을 냈고 ebook 으로도 제공하고 있으니 영어에 약하시는 분들은 무조건 이 책으로 학습하시면 될 것 같습니다. 하지만 제 개인적으로는 이 책(번역판)을 심도있게 보지 못했기 때문에.. 번역이 좋은지는 잘 모르겠네요.
&nbsp;</p>

<h3><a href="http://ruby.railstutorial.org/">Rails Tutorial</a></h3>

<p><img src="http://imageshack.us/a/img835/6688/ulg5.png" alt="Rails Tutorial" /><br/>
영어가 되신다면 전 위 책보다 이 책을 더 추천합니다. 온라인으로 무료로 공개되어있는 레일스 튜토리얼 책인데 최신 트렌드를 잘 반영해서 Step By Step 으로 프로젝트를 진행할 수 있는 문서입니다. 저도 Ruby 도 Rails 도 아무것도 모를때 이 책만 두 번정도 따라하면서 감을 잡았네요. 영어가 생각보다 쉽게 쓰여져있어서 생각보다 수월하게 읽히는 장점이 있습니다. Rails 뿐만 아니라 웹 프로그래밍 입문자를 고려해서 Heroku, Twitter Bootstrap, RSpec 등 다양한 도구와 라이브러리들을 활용해서 트위터와 비슷한 SNS 서비스를 만드는 걸 목표로 하고 있습니다. 챕터1부터 챕터11까지 따라만 가면 Ruby 와 Rails 도 배우고 TDD 도 하고 SNS 서비스 만들어서 Heroku 에 바로 배포까지 하는거죠. 굉장히 강추하는 책입니다. :)
&nbsp;</p>

<h3><a href="http://guides.rubyonrails.org/">Rails Guide</a></h3>

<p><img src="http://imageshack.us/a/img692/813/89tx.png" alt="Rails Guide" /><br/>
루비온레일스 공식가이드입니다. 말이 필요없겠죠? 시간날때마다 하나씩 들여다보면서 공부해보는 것도 나쁘지 않을 정도로 잘 써놓아서 솔직히 정면 돌파하고 싶으신 분들은 이 가이드 사이트 하나만 있어도 문제없을 것 같네요.
&nbsp;</p>

<h3><a href="http://rorlab.org/">RoRlab.org</a></h3>

<p><img src="http://imageshack.us/a/img687/7212/6gi.png" alt="RoRlab.org" /><br/>
최효성 박사님께서 운영하시는 국내 비공식 루비온레일스 Lab 입니다. 원래 직업이 의사이신데 Rails 에 꽂히셔서(?) 지식 기부를 무료로 하시고 오프라인으로도 강남에서 2주에 한번씩 입문자를 위한 세미나를 여시고 계십니다. 교재는 공식 레일스 가이드이고 번역까지 하고 계십니다. 의사라는 분들은 왜이렇게 다재다능한걸까요?(..) 어쨋든 대한민국 루비온레일스 전파에 힘쓰시고 계시고 시간이 되신다면 오프라인 세미나도 들어보시고 같이 공부해나가시면 큰 도움이 되는 곳입니다.
&nbsp;</p>

<h3><a href="http://www.codeschool.com/paths/ruby">Code School Rails</a></h3>

<p><img src="http://imageshack.us/a/img23/7170/h5f2.png" alt="Code School Rails" /><br/>
코드 스쿨의 모든 Rails 코스들은 굉장히 유익한 코스들입니다. 당장 Rails 를 설치하지 않아도 온라인 코스만 따라가도 Rails 전체를 Overview 하기에 부족함없는 코스들인데 저는 Rails for Zombies Redux 빼고는 어느 정도 Rails 개발을 하시는 중간중간에 보시는걸 추천드립니다. 처음에 다 보면서 공부해도 좋지만 와닿지 않을 수 있기때문에 금방 까먹거든요. Rails 기본, 최신 Rails 4, TDD(RSpec, Testunit), Rails Best Practice 까지 추천!
&nbsp;</p>

<h3><a href="http://railscasts.com/">Rails Casts</a></h3>

<p><img src="http://imageshack.us/a/img189/1539/yth9.png" alt="Rails Casts" /><br/>
기본적으로 레일스의 장점 중 하나는 쉽고 빠르게 쓸 수 있는 라이브러리(gem)들을 이용해서 빠르게 웹 애플리케이션 구축을 할 수 있다는 건데요. 그 많은 오픈소스 라이브러리들이 문서가 굉장히 불친절한 경우가 많습니다. 그런 라이브러리들을 빠르게 프로젝트에 적용하도록 도와주는 튜토리얼 문서와 동영상 강의가 있는 곳입니다. 아마 실제 개발을 하게되면 많이 참고하는 사이트 중 하나인 것 같습니다.
&nbsp;</p>

<h3><a href="http://net.tutsplus.com/category/tutorials/ruby/">Nettus+</a></h3>

<p><img src="http://imageshack.us/a/img20/2335/s8wb.png" alt="Nettus+" /><br/>
Nettus+는 여러가지 팁이나 튜토리얼 문서가 올라오는 사이트인데 도움이 되는 실전 예제를 다루는 문서들이 꽤 있습니다. Ruby 뿐만 아니라 다른 언어도 있으니 한번 참고해보세요.</p>

<p>&nbsp;</p>

<h2>Facebook Group</h2>

<h3><a href="https://www.facebook.com/groups/rubykr/">Ruby Korea</a></h3>

<p>국내 대표 Ruby 커뮤니티입니다. Ruby 코딩 도장, Rails 스터디 등이 운영되었으며 현재는 한달에서 세달에 한 번씩 간헐적으로(?) 세미나가 개최됩니다. 오시면 많은 국내 루비스트들을 보실수있죠. 질문이나 정보 공유에도 도움이 많이 되는 곳입니다.
&nbsp;</p>

<h3><a href="https://www.facebook.com/groups/rubyonrailskorea/">Ruby on Rails Korea</a></h3>

<p>RoRlab.org 에서 운영하는 페이스북 페이지입니다. 가입하실려면 자기소개를 준비하는 센스 ^^^;
&nbsp;</p>

<h3><a href="https://www.facebook.com/groups/BeRubyist/">Be a Rubyist</a></h3>

<p>여기에 끼기에는 좀 그렇지만 제가 직접 운영하는 비공식 스터디 그룹입니다. 루비, 레일스, 자바스크립트, 현재는 스칼라까지 하나의 주제로 두 달에서 길면 세 달까지 스터디를 하고 알고리즘 문제를 가지고 TDD 적용해보기, 페어프로그래밍해보기, 해커톤 등 여러 시도를 하면서 재밌게 스터디를 하고 있는 곳입니다. 매주 토요일 오전 10시에 구로디지털단지역 쪽에서 스터디를 하구 있구요. 다음 스터디 모집때 공지하면 많은 분들이 참여해주시면 좋을 것 같네요:)</p>

<p>&nbsp;</p>

<h2>Conclusion</h2>

<p>어떤 언어나 프레임워크나 그것을 빠르게 익히기 위해서는 Learn by Doing 하는 것이 지름길이라고 생각합니다. 그래서 그렇게 공부할 수 있는 리소스들을  추천을 해놓았구요. 좀 더 좋은 리소스와 자료들이 있으면 한국 루비 개발 생태계를 위해 공유해주시면 더 좋을 것 같습니다. 읽어주셔서 감사합니다.</p>

<p><img src="http://imageshack.us/a/img689/38/6bj0.png" alt="Ruby is.." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala 스터디 회고 및 발표 자료]]></title>
    <link href="http://flowkater.github.io/blog/2013/08/03/scala-study-resource/"/>
    <updated>2013-08-03T17:40:00+09:00</updated>
    <id>http://flowkater.github.io/blog/2013/08/03/scala-study-resource</id>
    <content type="html"><![CDATA[<p>현재 <a href="https://www.facebook.com/groups/BeRubyist/">Be a Rubists</a> 스터디에서 <a href="http://bjpublic.tistory.com/158">쉽게 배워서 빨리 써먹는 스칼라 프로그래밍</a> 스칼라 스터디를 진행하고 있습니다. 관련 발표자료를 공유하고 추후 자료를 더 보강해서 계속해서 업데이트 하겠습니다. <!-- more --></p>

<p>&nbsp;
매주 스터디를 진행하면서 회고를 작성중입니다. 스터디 참여 멤버분들의 피드백과 개선점, 느낌점을 그날그날 기록하여 스터디에 반영하도록 노력하고 있습니다.
<a href="https://github.com/flowkater/ProjectEuler_kr/tree/master/scala">스칼라 스터디 회고</a></p>

<h2>스칼라 스터디 오리엔테이션 &ndash; 발표자 서병선님</h2>

<script async class="speakerdeck-embed" data-id="e2608900de430130c1220eac3c9ba422" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 배열 사용하기 &ndash; 발표자 봉성주님</h2>

<script async class="speakerdeck-embed" data-id="4352ef50de450130500d1eb25ece1fde" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 맵과 튜플 &ndash; 발표자 이경욱님</h2>

<script async class="speakerdeck-embed" data-id="5b7d2cc0de450130c1230eac3c9ba422" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 클래스 &ndash; 발표자 김지원님</h2>

<script async class="speakerdeck-embed" data-id="43a50850dee101300cb91a5bfdd09542" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 오브젝트 &ndash; 발표자 최민기님</h2>

<script async class="speakerdeck-embed" data-id="7b0b7270de45013064152292094fcb41" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 패키지와 임포트 &ndash; 발표자 최민기님</h2>

<script async class="speakerdeck-embed" data-id="8fbc7d00de4501309e464266729d3f42" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 상속 &ndash; 발표자 서병선님</h2>

<script async class="speakerdeck-embed" data-id="aa33eb00de450130500d1eb25ece1fde" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 파일과 정규표현식 &ndash; 발표자 이경욱님</h2>

<script async class="speakerdeck-embed" data-id="bdeac460de45013027707a89a736d299" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>스칼라 Trait &ndash; 발표자 조재우(flowkater)</h2>

<script async class="speakerdeck-embed" data-id="d341cc10de45013064162292094fcb41" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<p><em><small><a href="https://www.facebook.com/groups/BeRubyist/" title="루비스트가 되자">Be a Rubyist</a> 페이스북 그룹에서 매주 토요일 오전 10시부터 오후 1시까지 모여서 같이 스칼라 스터디를 진행중입니다. 해커톤, 알고리즘 문제 페어 프로그래밍 등 단순한 북스터디 이상으로 시행착오를 겪으면서 7개월 넘게 운영되고 있는 스터디입니다. 관심있으신 분들은 많은 참여부탁드립니다. :) </small></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby, Rails 스터디 이전 발표 자료]]></title>
    <link href="http://flowkater.github.io/blog/2013/05/30/be-a-rubyist-1-2/"/>
    <updated>2013-05-30T11:51:00+09:00</updated>
    <id>http://flowkater.github.io/blog/2013/05/30/be-a-rubyist-1-2</id>
    <content type="html"><![CDATA[<p>그때 그때마다 발표자료를 백업해놨어야됬는데 많이 사라졌네요. 이전 발표자 분들에게 다시 보내달라고 요청은 했으나 언제 전부 업데이트 할 수 있을지..
일단 현재 남아있는 자료만 올리겠습니다.</p>

<!-- more -->


<h2>Be A Rubyist 해카톤 준비 전 간단한 경험 공유 &ndash; 발표자 조재우(flowkater)</h2>

<script async class="speakerdeck-embed" data-id="fbb1c380aaff01306d5d2af1e312ded6" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>Rails Active Record 에 관한 발표 &ndash; 발표자 김지원님</h2>

<script async class="speakerdeck-embed" data-id="a6578c00ab0001306d5d2af1e312ded6" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>Rails Migration 에 대한 발표 &ndash; 발표자 변준호님</h2>

<script async class="speakerdeck-embed" data-id="78e995b0af230130af6d7eed166d7b22" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>Rails Asset Pipeline 에 대한 발표 &ndash; 발표자 김명회님</h2>

<script async class="speakerdeck-embed" data-id="a2edf830b3110130f4f676ca31124ae6" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>Ruby &ndash; Data &amp; Object 요약 발표 &ndash; 발표자 임영수님</h2>

<script async class="speakerdeck-embed" data-id="63c4fb20ab1f01303283324ccc551f9a" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<p><em><small><a href="https://www.facebook.com/groups/BeRubyist/" title="루비스트가 되자">Be a Rubyist</a> 페이스북 그룹에서 <a href="http://euler.synap.co.kr/">오일러 프로젝트</a> 를 매주 수요일 저녁 7시에 모여서 같이 <a href="http://xper.org/wiki/xp/PairProgramming">페어프로그래밍</a>을 하면서 풀어나가고 있습니다. 관심있으신 분 참여해주세요! 지금은 자바스크립트, 클라이언트 프레임워크 스터디가 진행 중입니다.</small></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[자바스크립트 핵심가이드 스터디 발표 자료]]></title>
    <link href="http://flowkater.github.io/blog/2013/05/30/javascript-study-resource/"/>
    <updated>2013-05-30T11:06:00+09:00</updated>
    <id>http://flowkater.github.io/blog/2013/05/30/javascript-study-resource</id>
    <content type="html"><![CDATA[<p>현재 스터디에서 <a href="http://www.hanb.co.kr/book/look.html?isbn=978-89-7914-598-4">자바스크립트 핵심가이드</a> 스터디를 하고 있는데 어제 스터디를 마지막으로 책 스터디가 마무리되었습니다. 관련 발표자료를 공유하고 추후 자료를 더 보강해서 계속해서 업데이트 하겠습니다.</p>

<!-- more -->


<h2>자바스크립트 오리엔테이션 &ndash; 발표자 조재우(flowkater)</h2>

<script async class="speakerdeck-embed" data-id="45b52d10aafe0130da893e97780925f0" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>자바스크립트 awful&amp;bad parts &ndash; 발표자 조재우(flowkater)</h2>

<script async class="speakerdeck-embed" data-id="f2709f70aafd0130f3382e483e3562d4" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>자바스크립트 Array &ndash; 발표자 서병선님</h2>

<script async class="speakerdeck-embed" data-id="cf438620aaff0130efd95a101b549cb4" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<h2>자바스크립트 Style &ndash; 발표자 이수영님</h2>

<script async class="speakerdeck-embed" data-id="f77aac50b08f0130dda932ae863805fe" data-ratio="1.33333333333333" src="http://flowkater.github.io//speakerdeck.com/assets/embed.js"></script>


<p>&nbsp;</p>

<p><em><small><a href="https://www.facebook.com/groups/BeRubyist/" title="루비스트가 되자">Be a Rubyist</a> 페이스북 그룹에서 <a href="http://euler.synap.co.kr/">오일러 프로젝트</a> 를 매주 수요일 저녁 7시에 모여서 같이 <a href="http://xper.org/wiki/xp/PairProgramming">페어프로그래밍</a>을 하면서 풀어나가고 있습니다. 관심있으신 분 참여해주세요! 지금은 자바스크립트, 클라이언트 프레임워크 스터디가 진행 중입니다.</small></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[최적화된 에라토스테네스의 체 (Optimized sieve of Erathosthenes)]]></title>
    <link href="http://flowkater.github.io/blog/2013/04/08/coejeoghwadoen-eratoseuteneseuyi-ce-optimized-sieve-of-erathosthenes/"/>
    <updated>2013-04-08T13:32:00+09:00</updated>
    <id>http://flowkater.github.io/blog/2013/04/08/coejeoghwadoen-eratoseuteneseuyi-ce-optimized-sieve-of-erathosthenes</id>
    <content type="html"><![CDATA[<p><em><small>현재 <a href="https://www.facebook.com/groups/BeRubyist/" title="루비스트가 되자">Be a Rubyist</a> 페이스북 그룹에서 <a href="http://euler.synap.co.kr/">오일러 프로젝트</a> 를 매주 수요일 저녁 7시에 모여서 같이 <a href="http://xper.org/wiki/xp/PairProgramming">페어프로그래밍</a>을 하면서 풀어나가고 있습니다. 관심있으신 분 참여해주세요!</small></em></p>

<p>알고리즘에 관한 첫 포스팅인데 오늘은 <a href="http://ko.wikipedia.org/wiki/%EC%86%8C%EC%88%98">소수</a> 판별법에 대해서 얘기를 해볼까 합니다. 초기 알고리즘 문제를 접하면 가장 많이 접하는 문제인데 그 중 한 방법인 <a href="http://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4">에라토스테네스의 체</a>라는 방법을 알아보겠습니다. 그 전에 이 방법을 고민하게 만들었던 오일러 프로젝트의 문제를 한번 살펴보겠습니다. <!-- more --></p>

<h2>Problem 10</h2>

<p><em>10 이하의 소수를 모두 더하면 2 + 3 + 5 + 7 = 17 이 됩니다. 이백만(2,000,000) 이하 소수의 합은 얼마입니까?</em></p>

<p>굉장히 심플한 문제이고 n 이 소수인지 아닌지 판별하기 위해서 가장 심플한 아이디어는 2부터 n-1 까지 모든 수를 나눠서 나눠지는 숫자가 없으면 소수입니다. 간단히 볼까요?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_prime?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>하지만 이런 식으로 판별을 하게 될 경우 2,000,000 까지 모든 숫자를 확인한다면 시간은 굉장히 오래걸리게 됩니다. 그럼 이걸 어떻게 좀 더 최적화할 수 있을까요? 바로 다음 정리를 이용해서 시간을 줄일 수 있습니다.</p>

<h3>정리1</h3>

<p><em>1 보다 큰 자연수 n 에 대하여 √n 보다 작거나 같은 모든 소수가  n을 나누지 못하면 n은 소수이다.</em></p>

<h3>증명</h3>

<p><small><em>증명은 대우와 귀류법을 통해서 증명할 수 있습니다.</em></small></p>

<ul>
<li><small>대우명제를 부정 &ndash;> n이 합성수이면 n은 √n보다 작거나 같은 약수를 갖지 않는다.</small></li>
<li><small>n= a * b ( a, b 는 양의정수이고 1이 아니다)</small></li>
<li><small>가정에 의하면 2 ≤ a ≤ b &lt; n 이다.</small></li>
<li><small>a > √n, b > √n 이면 a * b > √n * √n 인데 이때, <em>n > n => 여기서 모순이 발생한다.</em></small></li>
</ul>


<blockquote><p><strong>따라서 n이 소수가 아니라면 n의 약수 중에서 √n보다 작거나 같은 소수가 존재한다. 그러므로 자연수 n이 √n 이하의 어떤 소수로도 나누어 떨어지지 않으면 n 은 소수이다.</strong></p></blockquote>

<p>이와 같은 방식으로 다시 코드를 보면</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_prime?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">))</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>시간 복잡도는 n-1에서 √n 으로 줄어드는 것을 알 수 있습니다.</p>

<p>하지만 여전히 2,000,000개의 모든 숫자를 체크하기에는 실행속도가 꽤 오래걸리는데, 소수 판별법에도 여러가지 방법이 있는데 n 까지의 소수를 구하는 방법 중 가장 고전적인 방법인 <a href="http://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4">에라토스테네스의 체</a> 방법을 이용해보기로 했습니다. 이 방법의 아이디어도 굉장히 심플합니다.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="에라토스체이미지" /></p>

<p>위 그림을 보면 간단히 이해가 될 것입니다. <em>2부터 (1은 소수가 아니므로) n 까지 모든 숫자를 배열에 넣고 차례대로 배열의 존재 유무를 체크합니다. 그리고 배열이 존재하면 또다른 배열에다가 담고 해당 배열 인덱스의 배수는 모두 삭제합니다. 이 방법으로 해나가다보면 위와 같이 120까지의 모든 소수를 구할 수 있게 됩니다.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum_of_primes</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sieve</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span> <span class="c1"># n 까지 true 로 배열</span>
</span><span class='line'>  <span class="n">sieve</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span> <span class="n">sieve</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1"># 0, 1 은 소수가 아니므로</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>    
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">if</span> <span class="n">x</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="k">then</span> <span class="n">sieve</span><span class="o">[</span><span class="n">x</span><span class="o">*</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">else</span> <span class="k">break</span> <span class="k">end</span><span class="p">}</span> <span class="k">if</span> <span class="n">sieve</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="c1"># 해당 인덱스가 true 이면 그 배수는 모두 false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">primes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">primes</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="k">if</span> <span class="n">sieve</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">}</span> <span class="c1"># true 인 인덱스만 배열에 입력</span>
</span><span class='line'>  <span class="n">primes</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># 소수들의 합을 반환</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>그런데 이렇게 하는게 처음 방법보다 훨씬 효율적이지는 않습니다. 해당 코드를 정리1을 응용해서 조금 더 개선시킬 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum_of_primes</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sieve</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sieve</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span> <span class="n">sieve</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>  <span class="c1"># √n까지만 구하면 배수는 모두 제거된다.</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">if</span> <span class="n">x</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="k">then</span> <span class="n">sieve</span><span class="o">[</span><span class="n">x</span><span class="o">*</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">else</span> <span class="k">break</span> <span class="k">end</span><span class="p">}</span> <span class="k">if</span> <span class="n">sieve</span><span class="o">[</span><span class="n">x</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">primes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">primes</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="k">if</span> <span class="n">sieve</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="n">primes</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>다시 위 에니메이션을 눈여겨 본다면, √120, 즉 10.xxx 전까지의 숫자의 배수만 체크하면 나머지는 모두 소수라는 것을 알게 됩니다.</p>

<p>이로써 조금 더 개선이 되었습니다. 하지만 우리는 소수 중 <em>2</em>에 주목할 필요가 있는데 이 소수는 소수 중에 유일한 짝수가 됩니다.</p>

<p>즉 2를 제외한 나머지 소수는 모두 홀수라는 거죠. 제일 처음 2를 체크하여 2의 배수를 제거하는 작업을 하는데 이때 n = 2,000,000 이라면 이것도 꽤나 시간이 걸리는 작업입니다.
그래서 아예 처음에 배열을 반토막 낸 상태에서 초기화하고 나중에 인덱스를 맞춰서 배열에 넣어주면 훨씬 더 작업속도가 빨라지는 것을 알 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum_of_primes_opt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sieve</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="p">(</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span> <span class="c1"># 반토막 낸다. (홀수만 고려)</span>
</span><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="c1"># 3부터 2step 씩 (3,5,..) </span>
</span><span class='line'>      <span class="k">next</span> <span class="k">unless</span> <span class="n">sieve</span><span class="o">[</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">]</span> <span class="c1"># 홀수만 고려해서 i 가 인덱스를 참조하기 때문에 반토막 낸 모든 배열 인덱스에 접근하기 위해 2를 나눠줌</span>
</span><span class='line'>                     <span class="c1"># 역시 false 이면 next </span>
</span><span class='line'>      <span class="p">(</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span> <span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">){</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span> <span class="n">sieve</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kp">false</span><span class="p">}</span> <span class="c1"># i의 배수를 모두 false 로 만드는 작업, 2부터 시작하면 짝수를 가리키는데 짝수는 고려하지 않으니 3부터.</span>
</span><span class='line'>                                   <span class="c1"># 역시 반토막 낸 배열에 접근하기 위해서 2를 나눠줌. i 의 배수이기 때문에 step 이 i 만큼 증가.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">primes</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># 홀수만 고려했기 때문에 2를 배열에 초기화</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">((</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="k">next</span> <span class="k">unless</span> <span class="n">sieve</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">primes</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1"># true 인 인덱스에 접근해서 원래 인덱스로 변환 (홀수로 변환)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">primes</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>위와 같이 코드를 작성하면 좀 더 최적화가 되었습니다. 실행속도를 비교를 해볼까요?</p>

<h3>sum_of_isprime</h3>

<p>실행속도: 42.xx sec
<img src="http://img854.imageshack.us/img854/1794/sumofisprime.png" alt="sum_of_isprime" /></p>

<h3>sum_of_primes</h3>

<p>실행속도: 0.94xx sec
<img src="http://imageshack.us/a/img39/975/sumofprimes.png" alt="sum_of_primes" /></p>

<h3>sum_of_primes_opt</h3>

<p>실행속도: 0.30xx sec
<img src="http://imageshack.us/a/img713/9319/sumofprimesopt.png" alt="sum_of_primes_opt" /></p>

<p>sum_of_isprime 은 위에서 정리1을 이용한 is_prime? 메서드를 이용해서 소수인지 판별 후 배열에 넣고 합을 구하는 메서드입니다. 실행속도가 굉장히 오래 걸리죠?</p>

<p>sum_of_primes 에 비해서 sum_of_primes_opt 는 3배 정도 빨라졌네요. 마지막으로 sum_of_primes_opt 메서드를 리팩토링 해보겠습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sum_of_primes_opt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">primes</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="n">sieve</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">((</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">step</span><span class="p">(</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span><span class="p">,</span> <span class="mi">2</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">if</span> <span class="n">sieve</span><span class="o">[</span><span class="n">i</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span> <span class="k">then</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">j</span><span class="o">|</span> <span class="n">sieve</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="kp">false</span><span class="p">}</span> <span class="k">else</span> <span class="k">next</span> <span class="k">end</span><span class="p">}</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">((</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">if</span> <span class="n">sieve</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="k">then</span> <span class="n">primes</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">else</span> <span class="k">next</span> <span class="k">end</span><span class="p">}</span>
</span><span class='line'>  <span class="n">primes</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><small>루비로 코딩을 하면서 제일 재밌는 부분이 바로 코드를 줄일수 있을때까지 줄여보는 재미인 것 같습니다. block 은 위대합니다..</small></p>

<p>소수 판별법은 이 외에도 굉장히 여러가지가 있으며 각각에 다양한 수학적 증명도 존재합니다. <a href="http://euler.synap.co.kr/">오일러 프로젝트</a>의 문제를 풀다보면 소수 관련 문제가 많이 있는데요. 앞으로 또 풀어보면서 다양한 소수판별법으로 접근해서 풀이를 해보기로 하겠습니다. 읽어주셔서 감사합니다.</p>

<p><small><em>참고</em></small></p>

<ul>
<li><small><a href="http://soyoja.com/160">soyojas님의 소수구하기알고리즘</a></small></li>
<li><small><a href="http://blog.naver.com/PostView.nhn?blogId=cky5122&amp;logNo=80170123656&amp;categoryNo=162&amp;parentCategoryNo=-1&amp;viewDate=&amp;currentPage=&amp;postListTopCurrentPage=&amp;isAfterWrite=true">조가희님의 소수 판별 알고리즘 시간 복잡도 분석</a></small></li>
<li><small><a href="http://hisjournal.net/blog/128">6l4ck3y3님의 소수판별알고리즘최적화</a></small></li>
<li><small><a href="http://sirini.net/blog/737">시리니님의 소수판별알고리즘</a></small></li>
</ul>

]]></content>
  </entry>
  
</feed>
